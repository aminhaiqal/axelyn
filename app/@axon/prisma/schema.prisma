// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  workflows     Workflow[]
  executions    Execution[]
  feedback      Feedback[]
}

model Workflow {
  id            String       @id @default(cuid())
  name          String
  description   String?
  isActive      Boolean      @default(true)

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  nodes         Node[]
  triggers      Trigger[]
  executions    Execution[]
  learning      WorkflowLearning[]
  version       WorkflowVersion[]
  trainingEvent TrainingEvent[]
  agentMemory   AgentMemory[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Node {
  id          String    @id @default(cuid())
  name          String
  description   String?

  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  type        String    // e.g. "http_request", "llm", "delay", "email"
  config      Json      // configuration (dynamic settings)
  nextNodeId  String?   // next node in flow
  
  label       String?
  positionX   Float     @default(0)
  positionY   Float     @default(0)
}

model Trigger {
  id          String    @id @default(cuid())
  name          String
  description   String?

  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  type        String    // e.g. "webhook", "schedule", "manual"
  config      Json      // trigger config (like cron time, or webhook URL)
  createdAt   DateTime  @default(now())
}

model Execution {
  id          String     @id @default(cuid())
  name          String
  description   String?
  
  workflow    Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  status      ExecutionStatus @default(PENDING)
  logs        Json?
  result      Json?
  startedAt   DateTime   @default(now())
  finishedAt  DateTime?

  feedback    Feedback[]
  llmCall     LLMCall[]
}

model LLMProvider {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  models      LLMModel[] // one-to-many

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model LLMModel {
  id          String      @id @default(cuid())
  name        String      // e.g., "gpt-4", "claude-v1", "qwen-7b"
  description String?
  
  provider    LLMProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId  String

  call        LLMCall[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model LLMCall {
  id            String     @id @default(cuid())

  workflowId    String?
  nodeId        String?

  execution     Execution? @relation(fields: [executionId], references: [id], onDelete: Cascade)
  executionId   String?
  llmModel      LLMModel?  @relation(fields: [llmModelId], references: [id])
  llmModelId    String?

  role          String?    // e.g. "system", "user", "assistant"
  prompt        String
  response      String
  tokensUsed    Int?
  costUsd       Float?
  durationMs    Int?
  metadata      Json?
  createdAt     DateTime   @default(now())
}

model Feedback {
  id            String     @id @default(cuid())

  execution     Execution  @relation(fields: [executionId], references: [id], onDelete: Cascade)
  executionId   String

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  rating        Int?       // e.g. 1â€“5 rating or -1/0/1
  isPositive    Boolean?   
  comment       String?    // "Be more concise" or "Missed context"
  metadata      Json?      // store structured info (prompt diffs, response deltas, etc.)
  sourceType    String     @default("human")

  workflowLearningId String? 
  workflowLearning   WorkflowLearning? @relation(fields: [workflowLearningId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime   @default(now())
}

model WorkflowLearning {
  id            String    @id @default(cuid())
  workflow      Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId    String

  successRate   Float     @default(0.0)
  lastImproved  DateTime?
  totalFeedback Int       @default(0)
  improvementNotes Json?  // internal audit of what changed

  feedback      Feedback[]
}

model LearningMetric {
  id             String    @id @default(cuid())
  workflowId     String
  metricName     String    // e.g. "response_quality", "latency", "error_rate"
  metricValue    Float
  recordedAt     DateTime  @default(now())
}

model WorkflowVersion {
  id          String     @id @default(cuid())
  workflow    Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String
  version     Int
  changes     Json
  createdAt   DateTime   @default(now())
}

model TrainingEvent {
  id          String    @id @default(cuid())
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String
  feedbackIds String[]  // which feedback entries triggered it
  type        String    // e.g. "prompt_update", "model_selection"
  result      Json?
  createdAt   DateTime  @default(now())
}

model AgentMemory {
  id          String     @id @default(cuid())
  workflow    Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  key         String     // e.g. "last_prompt", "context_summary", "error_patterns"
  value       Json
  scope       String     @default("long_term") // "short_term" | "long_term"
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}