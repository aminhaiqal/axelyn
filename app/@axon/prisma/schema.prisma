// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  workflows     Workflow[]
  executions    Execution[]
}

model Workflow {
  id            String       @id @default(cuid())
  name          String
  description   String?
  isActive      Boolean      @default(true)

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  nodes         Node[]
  triggers      Trigger[]
  executions    Execution[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Node {
  id          String    @id @default(cuid())
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  type        String    // e.g. "http_request", "llm", "delay", "email"
  config      Json      // configuration (dynamic settings)
  nextNodeId  String?   // next node in flow
  
  label       String?
  positionX   Float     @default(0)
  positionY   Float     @default(0)
}

model Trigger {
  id          String    @id @default(cuid())
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  type        String    // e.g. "webhook", "schedule", "manual"
  config      Json      // trigger config (like cron time, or webhook URL)
  createdAt   DateTime  @default(now())
}

model Execution {
  id          String     @id @default(cuid())
  workflow    Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  status      ExecutionStatus @default(PENDING)
  logs        Json?
  result      Json?
  startedAt   DateTime   @default(now())
  finishedAt  DateTime?
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}