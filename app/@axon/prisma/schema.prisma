// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================
enum PlatformRole {
  ADMIN
  BUSINESS_OWNER
  STAFF
}

enum BusinessRole {
  OWNER
  STAFF
}

enum BusinessStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
}

enum BusinessType {
  RETAIL
  RESTAURANT
  SERVICES
  ECOMMERCE
  EDUCATION
  HEALTHCARE
  OTHER
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum FeedbackType {
  THUMBS_UP
  THUMBS_DOWN
  EDIT
  SKIP
}

enum IntentCategory {
  INQUIRY
  BOOKING
  ORDER
  SUPPORT
  GREETING
  PRICING
  AVAILABILITY
  LOCATION
  OTHER
}

enum ConversationStatus {
  ACTIVE
  WAITING_HUMAN
  RESOLVED
  ARCHIVED
}

enum Language {
  ENGLISH
  MALAY
  MANGLISH
}

enum NodeType {
  TRIGGER
  RESPONSE
  INTENT_DETECTION
  KNOWLEDGE_RETRIEVAL
  LLM_CALL
  SENTIMENT_ANALYSIS
  ENTITY_EXTRACTION
  CONDITION
  SWITCH
  LOOP
  WAIT
  VARIABLE_SET
  VARIABLE_GET
  DATA_TRANSFORM
  API_CALL
  DATABASE_QUERY
  WEBHOOK
  CHECK_AVAILABILITY
  CALCULATE_PRICE
  VALIDATE_INPUT
  ESCALATE_TO_HUMAN
  NOTIFY_STAFF
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum WorkflowSource {
  AI_GENERATED
  USER_BUILT
  TEMPLATE
  HYBRID
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

// ==================== CORE MODELS ====================
model User {
  id               String    @id // Supabase Auth UUID
  email            String    @unique
  full_name        String?
  avatar_url       String?
  role             PlatformRole @default(BUSINESS_OWNER) // Platform-level (not per-business)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  memberships      BusinessMember[]
  created_businesses Business[] @relation("BusinessCreatedBy")

  @@index([role])
}

model BusinessMember {
  id            String           @id @default(cuid())
  user_id       String
  business_id   String
  role          BusinessRole     @default(STAFF)
  joined_at     DateTime         @default(now())

  user          User             @relation(fields: [user_id], references: [id])
  business      Business         @relation(fields: [business_id], references: [id])

  @@unique([user_id, business_id])
  @@index([business_id])
}

model Business {
  id                  String         @id @default(cuid())
  name                String
  business_type       BusinessType
  whatsapp_number     String
  phone_normalized    String @unique
  whatsapp_verified   Boolean @default(false)
  status              BusinessStatus @default(PENDING_VERIFICATION)
  created_by          User?          @relation("BusinessCreatedBy", fields: [created_by_id], references: [id])
  created_by_id       String?

  // Business details
  description         String? 
  operating_hours     Json           @default("{}") // store Dict[str, str] as JSON
  location            String?
  website             String?

  // AI Configuration
  brand_voice         String         @default("professional and friendly")
  default_language    Language       @default(MANGLISH)
  confidence_threshold Float         @default(0.7)

  // Learning metrics
  success_rate        Float          @default(0.0)
  total_conversations Int            @default(0)
  total_feedback      Int            @default(0)

  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt

  // Relations
  members               BusinessMember[]
  knowledge_bases       KnowledgeBase[]
  customers             Customer[]
  conversations         Conversation[]
  workflows             Workflow[]
  workflow_generation_requests WorkflowGenerationRequest[]
  response_patterns     ResponsePattern[]
  learing_events        LearningEvent[]
  workflow_suggestions  WorkflowSuggestion[]
  weekly_metrics        WeeklyMetrics[]
  integrations          Integration[]
}

model KnowledgeBase {
  id           String     @id @default(cuid())
  business_id  String
  business     Business   @relation(fields: [business_id], references: [id])

  // Content
  question     String
  answer       String
  category     String
  keywords     Json       @default("[]") // store List[str] as JSON

  // Metadata
  language     Language   @default(MANGLISH)
  priority     Int        @default(0)
  usage_count  Int        @default(0)
  success_rate Float      @default(0.0)

  // Embedding
  embedding    Json?      // store List[float] as JSON

  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model Customer {
  id                  String       @id @default(cuid())
  business_id         String
  business            Business     @relation(fields: [business_id], references: [id])
  whatsapp_number     String

  // Profile
  name                String?
  preferred_language  Language     @default(MANGLISH)

  // History
  total_conversations Int          @default(0)
  last_contacted      DateTime?

  // Context
  preferences         Json         @default("{}") // Dict[str, Any]
  past_orders         Json         @default("[]") // List[str]

  created_at          DateTime     @default(now())

  // Relations
  conversations       Conversation[]
}

model Conversation {
  id                  String           @id @default(cuid())
  business_id         String
  business            Business         @relation(fields: [business_id], references: [id])
  customer_id         String
  customer            Customer         @relation(fields: [customer_id], references: [id])
  workflow_id         String

  // State
  status              ConversationStatus @default(ACTIVE)
  detected_language   Language           @default(MANGLISH)

  // Context
  current_intent      IntentCategory?
  context_summary     String             @default("")

  // Workflow execution
  current_node_id     String?
  workflow_variables  Json               @default("{}") // Dict[str, Any]

  // Metrics
  message_count       Int                @default(0)
  ai_handled_count    Int                @default(0)
  human_handoff       Boolean            @default(false)
  avg_confidence      Float              @default(0.0)

  started_at          DateTime           @default(now())
  last_message_at     DateTime           @default(now())
  resolved_at         DateTime?

  // Relations
  messages            Message[]
}

model Message {
  id                  String         @id @default(cuid())
  conversation_id     String
  conversation        Conversation   @relation(fields: [conversation_id], references: [id])

  // Content
  role                MessageRole
  content             String
  detected_language   Language       @default(MANGLISH)

  // AI Processing
  detected_intent     IntentCategory?
  confidence          Float          @default(0.0)

  // Response generation
  knowledge_used      Json           @default("[]") // List[str]
  response_pattern_id String?
  workflow_node_id    String?

  // Feedback
  feedback            FeedbackType?
  feedback_note       String?
  edited_content      String?

  timestamp           DateTime       @default(now())
}

// ==================== WORKFLOW SYSTEM ====================
model Workflow {
  id                 String          @id @default(cuid())
  business_id        String
  business           Business        @relation(fields: [business_id], references: [id])

  // Metadata
  name               String
  description        String
  source             WorkflowSource  @default(AI_GENERATED)
  status             WorkflowStatus  @default(DRAFT)
  version            Int             @default(1)

  // Generation context
  user_prompt        String?
  generation_model   String          @default("claude-sonnet-4-5")

  // Trigger configuration
  trigger_type       String          @default("whatsapp_message")
  trigger_conditions Json            @default("{}") // Dict[str, Any]

  // Visual editor state
  canvas_data        Json            @default("{}") // Dict[str, Any]

  // Performance metrics
  execution_count    Int             @default(0)
  success_rate       Float           @default(0.0)
  avg_execution_time Float           @default(0.0)

  // Learning
  total_feedback     Int             @default(0)
  thumbs_up          Int             @default(0)
  thumbs_down        Int             @default(0)

  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  published_at       DateTime?

  // Relations
  nodes              WorkflowNode[]
  edges              WorkflowEdge[]
  executions         WorkflowExecution[]
  modifications      WorkflowModification[]
  response_patterns  ResponsePattern[]
  suggestions        WorkflowSuggestion[]
  metrics            WorkflowMetrics[]
}

model WorkflowNode {
  id                 String          @id @default(cuid())
  workflow_id        String
  workflow           Workflow        @relation(fields: [workflow_id], references: [id])

  // Node definition
  name               String
  node_type          NodeType
  description        String?

  // Configuration per node
  config             Json            @default("{}") // Dict[str, Any]

  // Visual editor properties
  position_x         Float           @default(0.0)
  position_y         Float           @default(0.0)
  ui_metadata        Json            @default("{}") // Dict[str, Any]

  // Connections
  next_nodes         Json            @default("[]") // List[str]
  conditional_paths  Json            @default("{}") // Dict[str, str]

  // Performance tracking
  execution_count    Int             @default(0)
  avg_execution_time Float           @default(0.0)
  error_count        Int             @default(0)

  // Learning signals
  feedback_score     Float           @default(0.0)

  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt

  response_patterns  ResponsePattern[]
  learning_events    LearningEvent[]
}

model WorkflowEdge {
  id                 String          @id @default(cuid())
  workflow_id        String
  workflow           Workflow        @relation(fields: [workflow_id], references: [id])

  // Connection
  from_node_id       String
  to_node_id         String

  // Condition and priority
  condition          String?
  priority           Int             @default(0)
  label              String?

  // Metrics
  traversal_count    Int             @default(0)

  created_at         DateTime        @default(now())
}

model WorkflowExecution {
  id                 String          @id @default(cuid())
  workflow_id        String
  workflow           Workflow        @relation(fields: [workflow_id], references: [id])
  conversation_id    String
  message_id         String?

  // Execution state
  status             String          @default("running") // could be enum later
  current_node_id    String?

  // Execution path
  nodes_executed     Json            @default("[]") // List[str]
  execution_times    Json            @default("{}") // Dict[node_id: time_ms]

  // Variables
  variables          Json            @default("{}") // Dict[str, Any]

  // Results
  final_output       String?
  errors             Json            @default("[]") // List[Dict]

  // Performance
  total_execution_time Float          @default(0.0)

  started_at         DateTime        @default(now())
  completed_at       DateTime?
}

model WorkflowTemplate {
  id                   String          @id @default(cuid())

  // Metadata
  name                 String
  description          String
  category             String
  business_types       Json            @default("[]") // List[BusinessType]

  // Template definition
  template_workflow    Json            // Nodes & edges JSON
  required_integrations Json           @default("[]") // List[str]

  // Preview
  thumbnail_url        String?
  example_conversations Json           @default("[]") // List[str]

  // Usage
  usage_count          Int             @default(0)
  rating               Float           @default(0.0)

  created_at           DateTime        @default(now())
}

// ==================== AI WORKFLOW GENERATION ====================
model WorkflowGenerationRequest {
  id                     String   @id @default(cuid())
  business_id            String
  business               Business @relation(fields: [business_id], references: [id])

  // User input
  user_prompt            String
  business_context       Json     @default("{}") // Dict[str, Any]

  // AI Generation
  generated_workflow_id  String?  
  generation_status      String   @default("pending") // pending, generating, completed, failed

  // Anthropic API details
  model_used             String   @default("claude-sonnet-4-5")
  prompt_tokens          Int      @default(0)
  completion_tokens      Int      @default(0)

  // Artifacts from generation
  claude_thinking        String?  
  suggested_nodes        Json     @default("[]") // List[Dict[str, Any]]
  suggested_connections  Json     @default("[]") // List[Dict[str, Any]]

  created_at             DateTime @default(now())
  completed_at           DateTime?
}

model WorkflowModification {
  id                     String   @id @default(cuid())
  workflow_id            String
  workflow               Workflow @relation(fields: [workflow_id], references: [id])

  // Change metadata
  modification_type      String   // "node_added", "node_deleted", "config_changed", "edge_added"
  user_id                String?
  source                 String   @default("user") // user, ai_suggestion, feedback_learning

  // Change details
  before_state           Json     @default("{}") // Dict[str, Any]
  after_state            Json     @default("{}") // Dict[str, Any]

  // If this was from AI suggestion
  ai_suggestion_reason   String?

  timestamp              DateTime @default(now())
}

// ==================== LEARNING SYSTEM ====================
model ResponsePattern {
  id                  String          @id @default(cuid())
  business_id         String
  business            Business        @relation(fields: [business_id], references: [id])
  workflow_id         String?
  workflow            Workflow?       @relation(fields: [workflow_id], references: [id])
  workflow_node_id    String?
  workflow_node       WorkflowNode?   @relation(fields: [workflow_node_id], references: [id])

  // Pattern definition
  intent              IntentCategory
  trigger_keywords    Json            @default("[]") // List[str]
  context_required    Json            @default("[]") // List[str]

  // Response template
  response_template   String
  example_responses   Json            @default("[]") // List[str]

  // Learning metrics
  times_used          Int             @default(0)
  thumbs_up           Int             @default(0)
  thumbs_down         Int             @default(0)
  success_rate        Float           @default(0.0)
  confidence_score    Float           @default(0.5)

  // Version control
  parent_pattern_id   String?
  version             Int             @default(1)

  created_at          DateTime        @default(now())
  last_used           DateTime?

  learning_events    LearningEvent[]
}

model LearningEvent {
  id                     String          @id @default(cuid())
  business_id            String
  business               Business        @relation(fields: [business_id], references: [id])

  // Context
  message_id             String
  conversation_id        String
  workflow_id            String
  workflow_node_id       String?
  workflow_node          WorkflowNode?   @relation(fields: [workflow_node_id], references: [id])
  response_pattern_id    String?
  response_pattern       ResponsePattern? @relation(fields: [response_pattern_id], references: [id])

  // Feedback
  feedback_type          FeedbackType
  original_response      String
  edited_response        String?

  // Impact on workflow
  workflow_modification_id String?
  confidence_change      Float           @default(0.0)
  new_pattern_created    Boolean         @default(false)
  pattern_updated        Boolean         @default(false)
  node_config_updated    Boolean         @default(false)

  timestamp             DateTime        @default(now())
}

model WorkflowSuggestion {
  id                     String          @id @default(cuid())
  workflow_id            String
  workflow               Workflow        @relation(fields: [workflow_id], references: [id])
  business_id            String
  business               Business        @relation(fields: [business_id], references: [id])

  // Suggestion
  suggestion_type        String          // "add_node", "modify_config", "add_edge", "optimize"
  title                  String
  description            String
  reasoning               String

  // Proposed changes
  proposed_changes       Json            @default("{}") // Dict[str, Any]

  // Supporting evidence
  based_on_feedback_count Int            @default(0)
  based_on_error_pattern  String?
  expected_improvement    Float          @default(0.0)

  // Status
  status                 String          @default("pending") // pending, accepted, rejected, applied
  applied_at             DateTime?

  created_at             DateTime        @default(now())
}

// ==================== ANALYTICS ====================
model WeeklyMetrics {
  id                   String     @id @default(cuid())
  business_id          String
  business             Business   @relation(fields: [business_id], references: [id])
  week_start           DateTime

  // Volume
  total_conversations  Int        @default(0)
  total_messages       Int        @default(0)
  unique_customers     Int        @default(0)

  // Performance
  success_rate         Float      @default(0.0)
  avg_confidence       Float      @default(0.0)
  human_handoffs       Int        @default(0)

  // Feedback
  thumbs_up            Int        @default(0)
  thumbs_down          Int        @default(0)
  edits                Int        @default(0)

  // Learning
  new_patterns_learned Int        @default(0)
  patterns_improved    Int        @default(0)
  workflows_modified   Int        @default(0)

  // Top intents
  top_intents          Json       @default("{}") // Dict[str, int]
}

model WorkflowMetrics {
  id                   String     @id @default(cuid())
  workflow_id          String
  workflow             Workflow   @relation(fields: [workflow_id], references: [id])
  time_period          String     // "daily", "weekly", "monthly"
  period_start         DateTime

  // Execution stats
  total_executions     Int        @default(0)
  successful_executions Int       @default(0)
  failed_executions    Int        @default(0)
  avg_execution_time   Float      @default(0.0)

  // User satisfaction
  thumbs_up            Int        @default(0)
  thumbs_down          Int        @default(0)
  satisfaction_rate    Float      @default(0.0)

  // Bottlenecks
  slowest_nodes        Json       @default("[]") // List[Dict[str, Any]] [{node_id, avg_time}, ...]
  error_prone_nodes    Json       @default("[]") // List[Dict[str, Any]] [{node_id, error_count}, ...]

  // Learning progress
  improvements_applied Int        @default(0)
}

model Integration {
  id                   String     @id @default(cuid())
  business_id          String
  business             Business   @relation(fields: [business_id], references: [id])

  // Integration details
  name                 String
  type                 String     // "api", "database", "payment", "calendar", etc.

  // Configuration
  config               Json       @default("{}") // Dict[str, Any]

  // Usage
  used_in_workflows    Json       @default("[]") // List[str]

  // Status
  status               String     @default("active") // active, error, disabled
  last_tested          DateTime?

  created_at           DateTime   @default(now())
}